'use client';

import { useState, useEffect, useRef, Suspense } from 'react';
import { FaLock, FaUnlock, FaKey, FaRandom, FaDatabase, FaUser, FaFileAlt, FaCheckCircle, FaCog, FaCalculator, FaSkull, FaHourglass, FaShieldAlt, FaWifi, FaGlobe, FaEye, FaBolt, FaTerminal } from 'react-icons/fa';
import { BiFingerprint, BiScan } from 'react-icons/bi';
import { SiMatrix } from 'react-icons/si';
import { RiComputerLine, RiShieldKeyholeLine } from 'react-icons/ri';
import dynamic from 'next/dynamic';
import GlitchText from './GlitchText';
import TypewriterEffect from './TypewriterEffect';
import { usePreventAutoScroll } from '../../lib/usePreventAutoScroll';
import { initScrollManager } from '../../lib/scrollManager';
import './passwordCracker.css';

// Dynamically import 3D components with no SSR to prevent hydration errors
const ProfileGlobe = dynamic(() => import('./ProfileGlobe'), { ssr: false, loading: () => <div className="w-full h-full bg-black rounded-full" /> });
const Globe3D = dynamic(() => import('./Globe3DWrapper'), { ssr: false, loading: () => <div className="w-full h-full bg-black rounded-md flex items-center justify-center"><SiMatrix className="text-green-500 animate-pulse text-2xl" /></div> });

// Interface definitions
interface BreachLocation {
  location: string;
  count: number;
  timestamp: string;
  severity: 'low' | 'medium' | 'high';
}

interface ParticleConfig {
  count: number;
  color: string;
  speed: number;
  size: number;
  active: boolean;
}

interface CrackAttempt {
  method: string;
  password: string;
  status: 'trying' | 'success' | 'failed';
  time: string;
  keyspace?: string;
  entropy?: number;
}

interface PasswordComplexity {
  length: number;
  uppercase: boolean;
  lowercase: boolean;
  numbers: boolean;
  symbols: boolean;
  score: number;
  timeToCrack: string;
  entropy: number;
}

interface PasswordCrackerProps {
  className?: string;
}

// Helper functions
const getKeyspaceSize = (methodId: string): string => {
  switch (methodId) {
    case 'bruteforce':
      return '95^8 (7e15) characters';
    case 'dictionary':
      return '100K-1M common passwords';
    case 'rainbow':
      return '10B+ pre-computed hashes';
    case 'social':
      return '1K-10K personalized guesses';
    case 'hybrid':
      return '100K base Ã— 1K mutations';
    default:
      return 'Unknown';
  }
};

// Main component
const PasswordCracker = ({ className = "" }: PasswordCrackerProps) => {
  // State declarations
  const [target, setTarget] = useState('');
  const [cracking, setCracking] = useState(false);
  const [attempts, setAttempts] = useState<CrackAttempt[]>([]);
  const [progress, setProgress] = useState(0);
  const [method, setMethod] = useState('bruteforce');
  const [passwordFound, setPasswordFound] = useState<string | null>(null);
  const [isGlitching, setIsGlitching] = useState(false);
  const [hashType, setHashType] = useState('md5');
  const [complexity, setComplexity] = useState<PasswordComplexity | null>(null);
  const [logs, setLogs] = useState<string[]>([]);
  const [isReady, setIsReady] = useState(false);
  const [showGlobe, setShowGlobe] = useState(false);
  const [animationMode, setAnimationMode] = useState<'matrix' | 'particles' | 'wave' | 'none'>('none');
  const [soundEnabled, setSoundEnabled] = useState(false);
  const [activeTab, setActiveTab] = useState<'crack' | 'analyze' | 'history'>('crack');
  // Add a client-side flag to prevent hydration mismatches
  const [isClient, setIsClient] = useState(false);
  const [breachLocations, setBreachLocations] = useState<BreachLocation[]>([
    { location: "New York, USA", count: 1250, timestamp: "2023-05-15", severity: "high" },
    { location: "London, UK", count: 850, timestamp: "2023-06-02", severity: "medium" },
    { location: "Tokyo, Japan", count: 720, timestamp: "2023-04-22", severity: "medium" },
    { location: "Sydney, Australia", count: 340, timestamp: "2023-07-10", severity: "low" },
    { location: "Berlin, Germany", count: 560, timestamp: "2023-05-30", severity: "medium" }
  ]);
  const [particleConfig, setParticleConfig] = useState<ParticleConfig>({
    count: 50,
    color: '#39ff14',
    speed: 1,
    size: 2,
    active: false
  });
  // Refs
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const progressBarRef = useRef<HTMLDivElement>(null);
  const logEndRef = useRef<HTMLDivElement>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Prevent auto-scrolling
  usePreventAutoScroll();

  // Initialize scroll manager
  useEffect(() => {
    return initScrollManager();
  }, []);

  // Set client-side flag on mount to prevent hydration mismatches
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Delay rendering of complex content
  useEffect(() => {
    if (!canvasRef.current || animationMode !== 'matrix' || !isReady) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Set canvas dimensions to match parent
    const resizeCanvas = () => {
      const parent = canvas.parentElement;
      if (parent) {
        canvas.width = parent.clientWidth;
        canvas.height = parent.clientHeight;
      }
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Matrix rain configuration
    const fontSize = 14;
    const columns = Math.floor(canvas.width / fontSize);
    const drops: number[] = Array(columns).fill(1);
    const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+{}:"<>?[];\',.'.split('');
    
    // Animation frame
    let animationId: number;
    
    const draw = () => {
      // Semi-transparent black background for trail effect
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      ctx.fillStyle = '#39ff14';
      ctx.font = `${fontSize}px monospace`;
      
      for (let i = 0; i < drops.length; i++) {
        // Generate random character
        const char = chars[Math.floor(Math.random() * chars.length)];
        
        // Draw the character
        ctx.fillText(char, i * fontSize, drops[i] * fontSize);
        
        // Reset position if it's at the bottom or randomly
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        
        // Move the drop down
        drops[i]++;
      }
      
      animationId = requestAnimationFrame(draw);
    };
    
    draw();
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationId);
    };
  }, [animationMode, isReady]);

  // Particle animation for password strength visualization
  useEffect(() => {
    if (!canvasRef.current || animationMode !== 'particles' || !isReady) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (!ctx) return;
    
    // Set canvas dimensions to match parent
    const resizeCanvas = () => {
      const parent = canvas.parentElement;
      if (parent) {
        canvas.width = parent.clientWidth;
        canvas.height = parent.clientHeight;
      }
    };
    
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    
    // Activate particles
    setParticleConfig(prev => ({...prev, active: true}));
    
    // Create particles
    const particles: {
      x: number;
      y: number;
      radius: number;
      color: string;
      velocity: { x: number; y: number };
      alpha: number;
      life: number;
      maxLife: number;
    }[] = [];
    
    // Generate particles based on password strength
    const generateParticles = () => {
      // Clear existing particles
      particles.length = 0;
      
      // Number of particles based on complexity
      const particleCount = complexity ? 
        Math.min(150, Math.floor((complexity.score || 1) * 30) + particleConfig.count) : 
        particleConfig.count;
      
      // Determine color based on password strength
      let particleColor = particleConfig.color;
      if (complexity) {
        if (complexity.score < 2) particleColor = '#ff3e3e'; // Weak - red
        else if (complexity.score < 3) particleColor = '#ff9d3e'; // Medium - orange
        else if (complexity.score < 4) particleColor = '#ffdf3e'; // Strong - yellow
        else particleColor = '#39ff14'; // Very strong - green
      }
      
      // Create particles
      for (let i = 0; i < particleCount; i++) {
        const radius = (Math.random() * particleConfig.size) + 1;
        const x = Math.random() * canvas.width;
        const y = Math.random() * canvas.height;
        
        // Velocity based on password strength
        const speedMultiplier = complexity ? 
          ((complexity.score || 1) * 0.5) + particleConfig.speed : 
          particleConfig.speed;
        
        const velocity = {
          x: (Math.random() - 0.5) * speedMultiplier,
          y: (Math.random() - 0.5) * speedMultiplier
        };
        
        // Random life for each particle
        const maxLife = Math.random() * 100 + 50;
        
        particles.push({
          x,
          y,
          radius,
          color: particleColor,
          velocity,
          alpha: 1,
          life: 0,
          maxLife
        });
      }
    };
    
    generateParticles();
    
    // Start animation loop
    let animationId: number;
    
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Update and draw particles
      for (let i = 0; i < particles.length; i++) {
        const p = particles[i];
        
        // Update position
        p.x += p.velocity.x;
        p.y += p.velocity.y;
        
        // Update life
        p.life++;
        if (p.life >= p.maxLife) {
          p.alpha = Math.max(0, p.alpha - 0.02);
          if (p.alpha <= 0) {
            // Reset particle
            p.x = Math.random() * canvas.width;
            p.y = Math.random() * canvas.height;
            p.alpha = 1;
            p.life = 0;
          }
        }
        
        // Bounce off walls
        if (p.x <= p.radius || p.x >= canvas.width - p.radius) {
          p.velocity.x = -p.velocity.x;
        }
        if (p.y <= p.radius || p.y >= canvas.height - p.radius) {
          p.velocity.y = -p.velocity.y;
        }
        
        // Draw particle
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2);
        ctx.fillStyle = p.color + Math.floor(p.alpha * 255).toString(16).padStart(2, '0');
        ctx.fill();
      }
      
      animationId = requestAnimationFrame(animate);
    };
    
    animate();
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', resizeCanvas);
      cancelAnimationFrame(animationId);
      setParticleConfig(prev => ({...prev, active: false}));
    };
  }, [animationMode, complexity, particleConfig, isReady]);
  // Effect for scroll handling
  useEffect(() => {
    // Scroll to logEndRef whenever logs change
    if (logEndRef.current) {
      logEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [logs]);

  // Effect for password found animation
  useEffect(() => {
    // Only trigger special effects when a password is found
    if (passwordFound) {
      // Trigger a glitch effect
      setIsGlitching(true);
      setTimeout(() => setIsGlitching(false), 300);
      
      // Auto-show the globe for dramatic effect
      setShowGlobe(true);
      
      // Play success sound
      playSound('success');
    }
  }, [passwordFound]);

  // Delay any animations to prevent triggering scroll issues
  useEffect(() => {
    if (!isReady) return;
    
    const timer = setTimeout(() => {
      // Now it's safe to enable animations and effects
      if (animationMode !== 'none') {
        const currentMode = animationMode;
        setAnimationMode('none');
        setTimeout(() => setAnimationMode(currentMode), 100);
      }
    }, 1500); // Increased delay to ensure component is fully rendered
    
    return () => clearTimeout(timer);
  }, [isReady, animationMode]);

  const toggleAnimationMode = (mode: 'matrix' | 'particles' | 'wave' | 'none') => {
    if (animationMode === mode) {
      setAnimationMode('none');
    } else {
      setAnimationMode(mode);
    }
    playSound('click');
  };

  const toggleGlobe = () => {
    setShowGlobe(!showGlobe);
  };

  const addLog = (message: string) => {
    const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
    setLogs(prev => [...prev.slice(-50), `[${timestamp}] ${message}`]);
  };

  // Component methods
  const playSound = (soundType: 'success' | 'error' | 'typing' | 'click' | 'alert') => {
    if (!soundEnabled) return;
    if (!audioRef.current) {
      audioRef.current = new Audio();
    }
    
    // Set the source based on the sound type
    switch (soundType) {
      case 'success':
        audioRef.current.src = '/sounds/success.mp3';
        break;
      case 'error':
        audioRef.current.src = '/sounds/error.mp3';
        break;
      case 'typing':
        audioRef.current.src = '/sounds/typing.mp3';
        break;
      case 'click':
        audioRef.current.src = '/sounds/click.mp3';
        break;
      case 'alert':
        audioRef.current.src = '/sounds/alert.mp3';
        break;
    }
    
    // Play the sound with error handling
    audioRef.current.play().catch(err => {
      // Silently handle play errors (common in browsers that block autoplay)
      console.log("Sound playback blocked or error:", err);
    });
  };

  // Render
  return (
    <div className={`${className} w-full bg-gray-900 text-green-500 p-4 rounded-lg relative overflow-hidden shadow-2xl border border-green-500 border-opacity-30 prevent-scroll-jump`}>
      {!isReady ? (
        <div className="min-h-[300px] flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block animate-spin text-3xl mb-4">
              <SiMatrix />
            </div>
            <p className="text-green-400 text-sm">Initializing security tools...</p>
          </div>
        </div>
      ) : (
        <>
          <canvas 
            ref={canvasRef} 
            className="absolute inset-0 w-full h-full pointer-events-none z-0" 
          />
          <div className="relative z-10">
            {/* Tabs navigation */}
            <div className="flex border-b border-green-500 border-opacity-30 mb-4">
              <button 
                onClick={() => setActiveTab('crack')}
                className={`px-4 py-2 mr-2 rounded-t-md ${activeTab === 'crack' ? 'bg-green-900 bg-opacity-20 text-green-400' : 'hover:bg-green-900 hover:bg-opacity-10'}`}
              >
                <FaKey className="inline mr-2" /> Password Cracker
              </button>
              <button 
                onClick={() => setActiveTab('analyze')}
                className={`px-4 py-2 mr-2 rounded-t-md ${activeTab === 'analyze' ? 'bg-green-900 bg-opacity-20 text-green-400' : 'hover:bg-green-900 hover:bg-opacity-10'}`}
              >
                <FaShieldAlt className="inline mr-2" /> Password Analyzer
              </button>
              <button 
                onClick={() => setActiveTab('history')}
                className={`px-4 py-2 rounded-t-md ${activeTab === 'history' ? 'bg-green-900 bg-opacity-20 text-green-400' : 'hover:bg-green-900 hover:bg-opacity-10'}`}
              >
                <FaDatabase className="inline mr-2" /> History
              </button>
            </div>
            
            {/* Main content area */}
            <div className="fade-in">
              {activeTab === 'crack' && (
                <div className="space-y-4">
                  <div className="flex flex-wrap items-center gap-2">
                    <div className="flex-1">
                      <label className="block text-xs mb-1">Target Password/Hash</label>                      <div className="relative flex">
                        <span className="inline-flex items-center px-2 bg-gray-800 border border-r-0 border-green-500 border-opacity-30 rounded-l-md">
                          {isClient ? (
                            <>
                              <FaLock className={passwordFound ? 'hidden' : ''} />
                              <FaUnlock className={passwordFound ? '' : 'hidden'} />
                            </>
                          ) : (
                            <FaLock />
                          )}
                        </span>
                        <input
                          type="text"
                          value={target}
                          onChange={(e) => setTarget(e.target.value)}
                          disabled={cracking}
                          placeholder="Enter password to crack or hash value..."
                          className="flex-1 bg-gray-800 border border-green-500 border-opacity-30 rounded-r-md p-2 text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
                        />
                      </div>
                    </div>
                    
                    <div>
                      <label className="block text-xs mb-1">Method</label>
                      <select
                        value={method}
                        onChange={(e) => setMethod(e.target.value)}
                        disabled={cracking}
                        className="bg-gray-800 border border-green-500 border-opacity-30 rounded-md p-2 text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
                      >
                        <option value="bruteforce">Brute Force</option>
                        <option value="dictionary">Dictionary Attack</option>
                        <option value="rainbow">Rainbow Tables</option>
                        <option value="social">Social Engineering</option>
                        <option value="hybrid">Hybrid Attack</option>
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-xs mb-1">Hash Type</label>
                      <select
                        value={hashType}
                        onChange={(e) => setHashType(e.target.value)}
                        disabled={cracking}
                        className="bg-gray-800 border border-green-500 border-opacity-30 rounded-md p-2 text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
                      >
                        <option value="md5">MD5</option>
                        <option value="sha1">SHA-1</option>
                        <option value="sha256">SHA-256</option>
                        <option value="bcrypt">bcrypt</option>
                        <option value="plaintext">Plaintext</option>
                      </select>
                    </div>
                  </div>
                  
                  <div className="flex space-x-2">
                    <button
                      onClick={() => {
                        if (!target) {
                          addLog("Error: No target password specified");
                          return;
                        }
                        setCracking(true);
                        setProgress(0);
                        setPasswordFound(null);
                        
                        // Simulate password cracking
                        const simulateCrack = () => {
                          const interval = setInterval(() => {
                            setProgress(prev => {
                              const newProgress = prev + (Math.random() * 2);
                              if (newProgress >= 100) {
                                clearInterval(interval);
                                setTimeout(() => {
                                  setPasswordFound(target);
                                  setCracking(false);
                                  addLog(`Password successfully cracked: ${target}`);
                                  playSound('success');
                                }, 500);
                                return 100;
                              }
                              return newProgress;
                            });
                            
                            // Add random attempt
                            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
                            let randomPassword = '';
                            for (let i = 0; i < target.length || i < 8; i++) {
                              randomPassword += chars.charAt(Math.floor(Math.random() * chars.length));
                            }
                            
                            setAttempts(prev => [
                              ...prev,
                              {
                                method,
                                password: randomPassword,
                                status: 'trying',
                                time: new Date().toISOString(),
                                keyspace: getKeyspaceSize(method)
                              }
                            ]);
                            
                          }, 200);
                          
                          addLog(`Starting ${method} attack on "${target}" using ${hashType} hash...`);
                          addLog(`Keyspace: ${getKeyspaceSize(method)}`);
                        };
                        
                        simulateCrack();
                      }}
                      disabled={cracking || !target}
                      className="flex-1 bg-green-900 hover:bg-green-800 text-green-100 py-2 px-4 rounded-md flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {cracking ? (
                        <>
                          <FaHourglass className="animate-spin mr-2" />
                          <span>Cracking...</span>
                        </>
                      ) : (
                        <>
                          <FaBolt className="mr-2" />
                          <span>Crack Password</span>
                        </>
                      )}
                    </button>
                    
                    <button
                      onClick={() => {
                        setIsGlitching(true);
                        setTimeout(() => setIsGlitching(false), 300);
                        toggleGlobe();
                      }}
                      className="bg-gray-800 hover:bg-gray-700 p-2 rounded-md border border-green-500 border-opacity-30"
                      title="Toggle Global Data View"
                    >
                      <FaGlobe size={20} />
                    </button>
                      <div className="dropdown relative">
                      <button
                        className="bg-gray-800 hover:bg-gray-700 p-2 rounded-md border border-green-500 border-opacity-30"
                        title="Visualization Settings"
                      >
                        <FaCog size={20} />
                      </button>
                      {isClient && (
                        <div className="dropdown-content absolute right-0 mt-2 w-40 rounded-md bg-gray-800 border border-green-500 border-opacity-30 shadow-lg hidden">
                          <button
                            onClick={() => toggleAnimationMode('matrix')}
                            className="block px-4 py-2 text-sm hover:bg-green-900 hover:bg-opacity-20 w-full text-left"
                          >
                            <SiMatrix className="inline mr-2" /> Matrix Rain
                          </button>
                          <button
                            onClick={() => toggleAnimationMode('particles')}
                            className="block px-4 py-2 text-sm hover:bg-green-900 hover:bg-opacity-20 w-full text-left"
                          >
                            <FaRandom className="inline mr-2" /> Particles
                          </button>
                          <button
                            onClick={() => setSoundEnabled(!soundEnabled)}
                            className="block px-4 py-2 text-sm hover:bg-green-900 hover:bg-opacity-20 w-full text-left"
                          >
                            {soundEnabled ? 'ðŸ”Š' : 'ðŸ”‡'} Sound Effects
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Progress bar */}
                  {cracking && (
                    <div className="mt-4">
                      <div className="w-full bg-gray-800 rounded-full h-4 border border-green-500 border-opacity-30">
                        <div
                          ref={progressBarRef}
                          className="bg-gradient-to-r from-green-800 to-green-400 h-full rounded-full transition-all duration-150 ease-out"
                          style={{ width: `${progress}%` }}
                        ></div>
                      </div>
                      <div className="flex justify-between text-xs mt-1">
                        <span>Progress: {progress.toFixed(1)}%</span>
                        <span>Estimated time: {progress > 0 ? ((100 - progress) * 0.2).toFixed(1) + 's' : 'Calculating...'}</span>
                      </div>
                    </div>
                  )}
                  
                  {/* Password found box */}
                  {passwordFound && (
                    <div className={`bg-gray-800 border-2 border-green-500 rounded-md p-4 mt-4 text-center ${isGlitching ? 'glitch-effect' : ''}`}>
                      <div className="text-lg mb-2 text-green-300">
                        <FaCheckCircle className="inline mr-2" />
                        <GlitchText text="Password Successfully Cracked" />
                      </div>
                      <div className="text-xl font-mono bg-black p-2 rounded-md inline-block min-w-[200px]">
                        {passwordFound}
                      </div>
                    </div>
                  )}
                    {/* 3D Globe */}
                  {showGlobe && (
                    <div className="mt-4 border border-green-500 border-opacity-30 rounded-md overflow-hidden" style={{ height: '300px' }}>
                      <Suspense fallback={<div className="flex items-center justify-center h-full bg-gray-900"><SiMatrix className="text-green-500 animate-pulse text-3xl" /></div>}>
                        <Globe3D breachLocations={breachLocations} />
                      </Suspense>
                    </div>
                  )}
                  
                  {/* Log output */}
                  <div className="mt-4">
                    <div className="flex items-center mb-2">
                      <FaTerminal className="mr-2" />
                      <h3 className="text-sm font-bold">Operation Log</h3>
                    </div>
                    <div className="bg-black rounded-md p-2 font-mono text-xs h-32 overflow-y-auto">
                      {logs.length === 0 && (
                        <div className="text-gray-500 italic">No operations logged yet...</div>
                      )}
                      {logs.map((log, i) => (
                        <div key={i} className="pb-1">{log}</div>
                      ))}
                      <div ref={logEndRef} />
                    </div>
                  </div>
                  
                  {/* Recent attempts */}
                  <div className="mt-4">
                    <div className="flex items-center mb-2">
                      <FaRandom className="mr-2" />
                      <h3 className="text-sm font-bold">Recent Attempts</h3>
                    </div>
                    <div className="bg-black rounded-md p-2 overflow-x-auto">
                      {attempts.length === 0 ? (
                        <div className="text-gray-500 italic text-xs">No attempts yet...</div>
                      ) : (
                        <table className="w-full text-xs">
                          <thead>
                            <tr className="border-b border-green-900">
                              <th className="pb-1 text-left pr-4">Password</th>
                              <th className="pb-1 text-left pr-4">Method</th>
                              <th className="pb-1 text-left">Status</th>
                            </tr>
                          </thead>
                          <tbody>
                            {attempts.slice(-5).map((attempt, i) => (
                              <tr key={i} className={i % 2 === 0 ? 'bg-gray-900 bg-opacity-30' : ''}>
                                <td className="py-1 pr-4 font-mono">{attempt.password}</td>
                                <td className="py-1 pr-4">{attempt.method}</td>
                                <td className="py-1">
                                  {attempt.status === 'trying' && <span className="text-yellow-400">Trying</span>}
                                  {attempt.status === 'success' && <span className="text-green-400">Success</span>}
                                  {attempt.status === 'failed' && <span className="text-red-400">Failed</span>}
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      )}
                    </div>
                  </div>
                </div>
              )}
              
              {activeTab === 'analyze' && (
                <div className="space-y-4">
                  <div>
                    <label className="block text-xs mb-1">Password to Analyze</label>
                    <div className="relative flex">
                      <span className="inline-flex items-center px-2 bg-gray-800 border border-r-0 border-green-500 border-opacity-30 rounded-l-md">
                        <FaCalculator />
                      </span>
                      <input
                        type="password"
                        placeholder="Enter password to analyze..."
                        className="flex-1 bg-gray-800 border border-green-500 border-opacity-30 rounded-r-md p-2 text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
                        onChange={(e) => {
                          const password = e.target.value;
                          
                          // Simple complexity analysis
                          if (password) {
                            const hasUpper = /[A-Z]/.test(password);
                            const hasLower = /[a-z]/.test(password);
                            const hasNumber = /[0-9]/.test(password);
                            const hasSymbol = /[^A-Za-z0-9]/.test(password);
                            
                            let score = 0;
                            if (password.length >= 8) score++;
                            if (password.length >= 12) score++;
                            if (hasUpper) score++;
                            if (hasLower) score++;
                            if (hasNumber) score++;
                            if (hasSymbol) score++;
                            
                            // Calculate entropy
                            let charset = 0;
                            if (hasLower) charset += 26;
                            if (hasUpper) charset += 26;
                            if (hasNumber) charset += 10;
                            if (hasSymbol) charset += 33;
                            
                            const entropy = Math.log2(Math.pow(charset, password.length));
                            
                            // Time to crack estimation
                            let timeToCrack = '';
                            if (entropy < 40) timeToCrack = 'Seconds to Minutes';
                            else if (entropy < 60) timeToCrack = 'Hours to Days';
                            else if (entropy < 80) timeToCrack = 'Months to Years';
                            else timeToCrack = 'Centuries+';
                            
                            setComplexity({
                              length: password.length,
                              uppercase: hasUpper,
                              lowercase: hasLower,
                              numbers: hasNumber,
                              symbols: hasSymbol,
                              score,
                              entropy,
                              timeToCrack
                            });
                            
                          } else {
                            setComplexity(null);
                          }
                        }}
                      />
                    </div>
                  </div>
                  
                  {complexity && (
                    <div className="bg-gray-800 border border-green-500 border-opacity-30 rounded-md p-4">
                      <h3 className="font-bold mb-3 flex items-center">
                        <BiScan className="mr-2" /> Password Strength Analysis
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <div className="mb-2">
                            <div className="flex justify-between items-center mb-1">
                              <span className="text-xs">Strength Score</span>
                              <span className="text-xs font-bold">
                                {complexity.score < 2 && 'Very Weak'}
                                {complexity.score === 2 && 'Weak'}
                                {complexity.score === 3 && 'Moderate'}
                                {complexity.score === 4 && 'Strong'}
                                {complexity.score > 4 && 'Very Strong'}
                              </span>
                            </div>
                            <div className="w-full bg-gray-700 rounded-full h-2">
                              <div
                                className={`h-full rounded-full ${
                                  complexity.score < 2 ? 'bg-red-500' :
                                  complexity.score < 3 ? 'bg-orange-500' :
                                  complexity.score < 4 ? 'bg-yellow-500' :
                                  complexity.score < 5 ? 'bg-green-400' : 'bg-green-300'
                                }`}
                                style={{ width: `${Math.min(100, complexity.score * 16.7)}%` }}
                              ></div>
                            </div>
                          </div>
                            <div className="text-xs grid grid-cols-2 gap-2">
                            <div className="flex items-center">
                              {isClient && (
                                <span className={`mr-2 ${complexity.length >= 8 ? 'text-green-400' : 'text-red-400'}`}>
                                  {complexity.length >= 8 ? 'âœ“' : 'âœ—'}
                                </span>
                              )}
                              Length (min 8)
                            </div>
                            <div className="flex items-center">
                              {isClient && (
                                <span className={`mr-2 ${complexity.lowercase ? 'text-green-400' : 'text-red-400'}`}>
                                  {complexity.lowercase ? 'âœ“' : 'âœ—'}
                                </span>
                              )}
                              Lowercase
                            </div>
                            <div className="flex items-center">
                              {isClient && (
                                <span className={`mr-2 ${complexity.uppercase ? 'text-green-400' : 'text-red-400'}`}>
                                  {complexity.uppercase ? 'âœ“' : 'âœ—'}
                                </span>
                              )}
                              Uppercase
                            </div>
                            <div className="flex items-center">
                              {isClient && (
                                <span className={`mr-2 ${complexity.numbers ? 'text-green-400' : 'text-red-400'}`}>
                                  {complexity.numbers ? 'âœ“' : 'âœ—'}
                                </span>
                              )}
                              Numbers
                            </div>
                            <div className="flex items-center">
                              {isClient && (
                                <span className={`mr-2 ${complexity.symbols ? 'text-green-400' : 'text-red-400'}`}>
                                  {complexity.symbols ? 'âœ“' : 'âœ—'}
                                </span>
                              )}
                              Symbols
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <div className="mb-3">
                            <div className="text-xs mb-1">Entropy: {complexity.entropy.toFixed(1)} bits</div>
                            <div className="w-full bg-gray-700 rounded-full h-2">
                              <div
                                className="bg-blue-500 h-full rounded-full"
                                style={{ width: `${Math.min(100, complexity.entropy / 128 * 100)}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div className="bg-gray-900 rounded p-3 text-xs space-y-2">
                            <div className="flex justify-between">
                              <span>Estimated time to crack:</span>
                              <span className={`font-bold ${
                                complexity.entropy < 60 ? 'text-red-400' : 
                                complexity.entropy < 80 ? 'text-yellow-400' : 'text-green-400'
                              }`}>
                                {complexity.timeToCrack}
                              </span>
                            </div>
                            <div className="text-xs text-gray-400 italic">
                              * Based on modern hardware using brute force methods
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {activeTab === 'history' && (
                <div className="space-y-4">
                  <div className="bg-gray-800 border border-green-500 border-opacity-30 rounded-md p-4">
                    <h3 className="font-bold mb-3 flex items-center">
                      <FaDatabase className="mr-2" /> Password Breach Database
                    </h3>
                    
                    <div className="text-sm mb-4">
                      Search known password breaches across the dark web and data breach archives.
                    </div>
                    
                    <div className="relative flex mb-4">
                      <span className="inline-flex items-center px-2 bg-gray-900 border border-r-0 border-green-500 border-opacity-30 rounded-l-md">
                        <BiFingerprint />
                      </span>                      <input
                        type="text"
                        placeholder="Search email, username, or domain..."
                        className="flex-1 bg-gray-900 border border-green-500 border-opacity-30 rounded-r-md p-2 text-sm focus:outline-none focus:ring-1 focus:ring-green-500"
                      />
                      <button 
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-green-400"
                        aria-label="Search"
                      >
                        <FaEye />
                      </button>
                    </div>
                    
                    <div className="text-center text-sm text-gray-400 italic">
                      No breach data available for this search term.
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default PasswordCracker;